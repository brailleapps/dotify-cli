apply plugin: 'application'
apply plugin: 'maven'
apply plugin: "signing"

mainClassName = "org.daisy.dotify.cli.DotifyCLI"
startScripts.applicationName = 'dotify'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def repoRevision = System.getenv("REPO_REVISION")!=null?System.getenv("REPO_REVISION"):repositoryRevision

group = "org.daisy.dotify"

ext {
	versions = [
			'osgi'               : '5.0.0',
			'junit'              : '4.7',
			'felix'              : '4.4.1',
			'paxExam'            : '3.5.0', //4.4.0 requires Java 7
			'paxUrl'             : '2.3.0',
	]
}

sourceSets {
	main {
		java {
			srcDir 'src'
		}
		resources {
			srcDir 'src'
		}
	}
	test {
		java {
			srcDir 'test'
			srcDir 'integrationtest'
		}
		resources {
			srcDir 'test'
			srcDir 'integrationtest'
		}
	}
}

jar.doFirst {
	manifest {
    	attributes ('Built-By': System.getProperty("user.name"),
    	'Main-Class': mainClassName,
    	'Built-On': new Date().format('yyyy-MM-dd'),
		'Repository-Revision': "$repoRevision",
		'Implementation-Title': "$releaseName",
		'Implementation-Version': version,
		'Implementation-URL': "$repositoryURL",
		'Class-Path': configurations.runtime.collect { it.getName() }.join(' ')			//'${core.classpath.attribute}'
		)
	}
	from sourceSets.main.allJava
	baseName = 'dotify-cli'
}

repositories {
	mavenCentral()
	//maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
	//maven { url "https://oss.sonatype.org/content/groups/staging" }
	//mavenLocal()
}

dependencies {
	compile ('org.daisy.braille:braille-utils.ui:2.0.0-beta1') {
		exclude module: 'Saxon-HE'
	}
	compile ('org.daisy.braille:braille-utils.pef-tools:2.0.0-alpha') {
		exclude module: 'Saxon-HE'
	}
	compile 'org.daisy.dotify:dotify.api:2.10.0'
	compile 'org.daisy.dotify:dotify.common:2.1.0'
	compile ('org.daisy.dotify:dotify.task-runner:1.1.0') {
		exclude module: 'dotify.task-api'
	}
	compile 'org.daisy.dotify:dotify.task-api:2.3.0'

	runtime ('org.daisy.dotify:dotify.formatter.impl:2.7.0') {
		exclude module: 'Saxon-HE'
	}
	runtime 'org.daisy.dotify:dotify.hyphenator.impl:2.0.1'
	runtime 'org.daisy.dotify:dotify.text.impl:2.0.0'
	runtime 'org.daisy.dotify:dotify.translator.impl:2.3.0'
	runtime ('org.daisy.dotify:dotify.task.impl:2.11.0') {
		exclude module: 'Saxon-HE'
	}
	runtime group: "com.googlecode.texhyphj", name: "texhyphj", version: "1.2"
	//runtime 'xerces:xercesImpl:2.11.0'

	testCompile group: 'junit', name: 'junit', version: "$versions.junit"

	testCompile "javax.inject:javax.inject:1"
	testCompile "org.ops4j.pax.exam:pax-exam-junit4:$versions.paxExam"
	testRuntime "org.ops4j.pax.exam:pax-exam-container-native:$versions.paxExam"
	testRuntime "org.ops4j.pax.exam:pax-exam-link-mvn:$versions.paxExam"
	testRuntime "org.ops4j.pax.url:pax-url-aether:$versions.paxUrl"
	testRuntime "org.ops4j.pax.url:pax-url-reference:$versions.paxUrl"
	testRuntime "org.ops4j.pax.url:pax-url-wrap:$versions.paxUrl"
	testRuntime "org.apache.felix:org.apache.felix.framework:$versions.felix"
	testCompile("org.osgi:org.osgi.core:$versions.osgi")
	testCompile("org.osgi:org.osgi.compendium:$versions.osgi")
}

applicationDistribution.from(file('docs')) {
    into 'docs'
}

task xsltdoc() << {
	ant {
		xslt (
			basedir: "src",
			destdir: (new File(docsDir, "xsltdoc")),
			style: "build-xslt-doc.xsl",
			includes: "**/*.xsl",
			excludes:"lib, ant-build, build-xslt-doc.xsl, build",
			filenameparameter: "filename"
		) {
			mapper (
				type: "package",
				from: "*.xsl",
				to: "*.html"
			)
			xmlcatalog {
				dtd (
					publicId: "-//W3C//DTD XHTML 1.0 Strict//EN",
					location: "ant-build/resources/dtd/xhtml10/xhtml1-strict.dtd"
				)
			}
		}
	}
}

javadoc.dependsOn(xsltdoc)

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
	required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
	sign configurations.archives
}

uploadArchives {
	//Only upload if a git hash is supplied. On Travis only upload snapshots.
	enabled = repoRevision.size()==40 && System.getenv("TRAVIS_BUILD_ID")!=null
	repositories {
		mavenDeployer {
			if (isReleaseVersion) {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			}
			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}
			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}
            pom.project {
				name 'dotify-cli'
				packaging 'jar'
				description 'Dotify CLI'
				url "$repositoryURL"
				scm {
					connection "$repositorySCM"
					developerConnection "$repositorySCM"
					url "$repositoryURL"
				}
                licenses {
					license {
						name 'LGPL'
						url 'http://www.gnu.org/licenses/lgpl.html'
					}
                }
				developers {
					developer {
						id 'joel'
						name 'Joel HÃ¥kansson'
					}
				}
			}
		}
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}